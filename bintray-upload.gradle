apply plugin: 'com.jfrog.bintray'

task generateSourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier 'sources'
}

task generateJavadocs(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    options.addStringOption('Xdoclint:none', '-quiet')
}
afterEvaluate {
    generateJavadocs.classpath += files(android.libraryVariants.collect { variant ->
        variant.getJavaCompileProvider().configure() {
            it.classpath
        }
    })
    generateJavadocs.classpath += files(android.libraryVariants.collect { variant ->
        variant.getJavaCompileProvider().configure() {
            it.outputs
        }
    })
}

task generateJavadocsJar(type: Jar, dependsOn: generateJavadocs) {
    from generateJavadocs.destinationDir
    classifier 'javadoc'
}

artifacts {
    archives generateSourcesJar
//    archives generateJavadocsJar
}

// For the plugin 'com.jfrog.bintray'
Properties properties = new Properties()
if (rootProject.file('local.properties').exists()) {
    properties.load(rootProject.file('local.properties').newDataInputStream())
}

bintray {
    user = properties.getProperty('bintray.user')
    key = properties.getProperty('bintray.apikey')

    configurations = ['archives']

    publish = true

    pkg {
        repo = bintrayMaven.projectRepo
        name = project.ext.moduleName
        desc = project.ext.moduleDesc
        websiteUrl = bintrayMaven.projectUrl
        vcsUrl = bintrayMaven.projectScmConnection
        licenses = ['Apache-2.0']
        publicDownloadNumbers = true

        version {
            name = bintrayMaven.version
            released  = new Date()
        }
    }
}
